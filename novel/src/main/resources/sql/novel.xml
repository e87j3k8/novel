<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE sqlMap PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" "http://ibatis.apache.org/dtd/sql-map-2.dtd">

<sqlMap namespace="novel">
	<!-- 작품 목록 -->
	<select id="novel.getProductList" resultClass="novelVo">
		select
			tn.id as novelId,
			tu.nick as authorNm,
			tn.title as title,
			(select tg.genreNm from tb_genrecode tg where tg.id=tn.genre1) as genre,
			ifnull((select tg.genreNm from tb_genrecode tg where tg.id=tn.genre2),'') as genre2,
			ifnull((select count(*) from tb_recommend tr where tr.novelId = tn.id and tr.status = 0),0) as `like`,
			ifnull((select count(*) from tb_recommend tr2 where tr2.novelId = tn.id and tr2.status =1) ,0) as dislike,
			ifnull(sum(a.`view`),0) as viewAll,
			date_format(ti.regDt,'%Y-%m/%d %h:%i') as regDt,
			if(date_format(ti.regDt,'%Y-%m/%d %h:%i') between date_format(date_sub(now(), INTERVAL 1 day) ,'%Y-%m/%d %h:%i') and date_format(now(),'%Y-%m/%d %h:%i'),true,false) as isNew
		from tb_novel tn
		inner join tb_user tu on tn.author = tu.id
		inner join tb_items ti on tn.id=ti.novelId
		left join (
			select
				tv.itemId,
				count(tv.itemId) as `view`
			from tb_view tv
			group by itemId
		) a
		on ti.id = a.itemId
		where 1=1
		<isNotEqual prepend="and" property="genreCode" compareValue="0">
		tn.genre1 =#genreCode# or tn.genre2 =#genreCode#
		</isNotEqual>
		group by tn.id
		order by ti.regDt desc
		<isNotEmpty property="page">
		limit #page#, #VIEWPAGE#
		</isNotEmpty>
	</select>
	
	<!-- 작품 조회 -->
	<select id="novel.getProduct" parameterClass="novelVo" resultClass="novelVo">
		select
			tn.id as novelId,
			tu.nick as authorNm,
			tn.title as title,
			(select tg.genreNm from tb_genrecode tg where tg.id=tn.genre1) as genre,
			ifnull((select tg.genreNm from tb_genrecode tg where tg.id=tn.genre2),'') as genre2,
			ifnull((select count(id) from tb_recommend tr where tr.novelId = tn.id and tr.status = 0),0) as `like`,
			ifnull((select count(*) from tb_recommend tr2 where tr2.novelId = tn.id and tr2.status =1) ,0) as dislike
		from tb_novel tn
		inner join tb_user tu on tn.author = tu.id
		where tn.id =#novelId#
	</select>
		
	<select id="novel.getGenre" resultClass="genreVo">
		select
			id as genreId,
			genreNm as genreNm
		from tb_genrecode
	</select>
	
	<!-- 메인화면 랭킹 -->
	<select id="novel.rankingTop" parameterClass="hashMap" resultClass="novelVo">
		select
			tn.id as novelId,
			title as title,
			ifnull(sum(a.view),0) as `viewAll`
		from tb_novel tn
		inner join tb_items ti on tn.id=ti.novelId
		left join (
			select
				tv.itemId,
				count(tv.itemId) as `view`
			from tb_view tv
			group by itemId
		) a on ti.id = a.itemId
		group by tn.id
		order by `viewAll` desc,tn.id
		<isNotEmpty property="rank">
		limit #rank#
		</isNotEmpty>
	</select>
	
	<!-- 페이징을 위한 작품 수 -->
	<select id="novel.countAll" parameterClass="int" resultClass="int">
	select
		count(tn.id)
	from tb_novel tn
	<isNotEqual compareValue="0">
	where (tn.genre1 =#genreCode# or tn.genre2 =#genreCode#)
	</isNotEqual>
	</select>
	
	<select id="novel.isRecommend" parameterClass="hashMap" resultClass="long">
		select
			id
		from tb_recommend tr
		where tr.userBy = #userBy# and tr.novelId = #novelId#
	</select>
	
	<select id="novel.getRecommend" parameterClass="long" resultClass="hashMap">
	select
		ifnull(case when status=0 then count(id) end,0) as `like`,
		ifnull(case when status=1 then count(id) end,0) as dislike
	 from tb_recommend tr where novelId =#novelId#
	</select>
	
	<update id="novel.insertRecommend" parameterClass="hashMap">
		insert into tb_recommend(novelId, status, userBy) values(#novelId#, #status#, #userBy#)
	</update>
	
	<update id="novel.cancelRecommend" parameterClass="hashMap">
		update
			tb_recommend tr
		set tr.status = #status# where tr.id = #id#
	</update>
</sqlMap>